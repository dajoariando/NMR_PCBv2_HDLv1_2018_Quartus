function compute_dt1sw(path,SpD,enable_figure)
%path : directory path to the samples, with freq_sweep.txt generated by the
%c-code
% enable_figure : enable the figure generated by compute_single
% SpD           : number of scans per duty cycle
    
    if exist ([path,'\processed_data.mat'],'file') % check if this computation has been done before
        load([path,'\processed_data.mat']);
    else
    
        %close all;

        %profile on;

        % this is a standard butterworth filter used by downconverter (downconvert.m)
        % it is implemented here because it takes forever to compute it, and
        % the downconverter is called thousand times depending on the data
        n = 3; Wn = 0.008;
        [butter_b,butter_a] = butter(n,Wn);

        fileID = fopen([path,'\dt1_sweep.txt'],'r');
        param_settings=fscanf(fileID,'%f');
        fclose(fileID);

        fileID = fopen([path,'\matlab_settings.txt'],'r');
        nmr_settings=fscanf(fileID,'%f');
        fclose(fileID);
        NoE = nmr_settings(12);		% number of echoes
        tE = nmr_settings(9);       % echo spacing
        data_freq	= nmr_settings(6)*1e6;	% data frequency



        start_param = param_settings(1);       % start parameter
        stop_param = param_settings(2);        % stop parameter
        spacing_param = param_settings(3);     % spacing parameter


        sweep_param = start_param : spacing_param : (stop_param-spacing_param);
        a = zeros(length(sweep_param),NoE);
        a_initial = zeros(1,length(sweep_param));
        for m = 1:length(sweep_param)
            disp(['current dt: ',num2str(sweep_param(m)*100),'%']);
            filename = ['\dat_',num2str(sweep_param(m),'%03.3f')];
            %[a(m,:),a_init(m),a_sum_simple(m)] = compute_single(path,filename,data_freq,enable_figure, butter_a, butter_b);
            [a(m,:),a_init(m),a_avg(m)] = compute_multiple(path,filename,data_freq,enable_figure, butter_a, butter_b, SpD);
        end

        save([path,'\processed_data']); % save processed data
        
    end

        % PLOT OPTION 1
        figure(172);
        plot(sweep_param*100,sum(real(a')),'x');
        title('Echo average with duty cycle sweep'); set(gca,'FontSize',12);
        xlabel('Duty cycle (%)');
        ylabel('Amplitude');
        
        figure(173);
        plot(sweep_param*100,a_init,'x');
        title('Initial amplitude with duty cycle sweep'); set(gca,'FontSize',12);
        xlabel('Duty cycle (%)');
        ylabel('Amplitude');
    %     
    %     figure(174);
    %     plot(sweep_param*100,a_sum_simple);
    %     title('Real signal amplitude');
    %     xlabel('Duty cycle (%)');
    %     ylabel('Amplitude');
    
    
%     % curve fit
%     fittype = 'poly5';
%     [v_curve,~,v_output]=fit((sweep_param.*100)',sum(real(a'))',fittype);
%     [a_curve,~,a_output]=fit((sweep_param.*100)',a_init',fittype);
%     [s_curve,~,s_output]=fit((sweep_param.*100)',a_avg',fittype);
% 
% %   PLOT OPTION 2
%     figure(172);
%     subplot(2,1,1);
%     plot(v_curve,sweep_param.*100,sum(real(a')));
%     title('Vector signal amplitude');
%     xlabel('Duty cycle (%)');
%     ylabel('Amplitude');
%     subplot(2,1,2);
%     hist(v_output.residuals);
%     title('Residual');
%     xlabel('\Delta A');
%     ylabel('Amplitude');  
%     
%     figure(173);
%     subplot(2,1,1);
%     plot(a_curve,sweep_param.*100,a_init);
%     title('Initial signal amplitude');
%     xlabel('Duty cycle (%)');
%     ylabel('Amplitude');
%     subplot(2,1,2);
%     hist(a_output.residuals);
%     title('Residual');
%     xlabel('\Delta A');
%     ylabel('Amplitude');
%     
%     figure(174);
%     subplot(2,1,1);
%     plot(s_curve,sweep_param.*100,a_avg);
%     title('Real signal amplitude');
%     xlabel('Duty cycle (%)');
%     ylabel('Amplitude');
%     subplot(2,1,2);
%     hist(s_output.residuals);
%     title('Residual');
%     xlabel('\Delta A');
%     ylabel('Amplitude');
    
    %profile viewer;
end