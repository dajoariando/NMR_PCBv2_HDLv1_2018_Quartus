function compute_t1_meas(path,en_fig)
%path : directory path to the samples, with freq_sweep.txt generated by the
%c-code
% enable_figure : enable the figure generated by compute_single
% SpS           : number of scans per t1_180_deg_us step
    
    %% SETTINGS
    reprocess_basic_op = 0; % reprocess basic operation of the data for basic plotting
    reprocess_conversion = 0; % reprocess conversion from original data format to kea format
    process_2D_inversion = 1; % process 2D inversion of the data

    %% BASIC PROGRAM
    if exist ([path,'\processed_data.mat'],'file') && ~reprocess_basic_op % check if this computation has been done before
        load([path,'\processed_data.mat']);
    else

        % this is a standard butterworth filter used by downconverter (downconvert.m)
        % it is implemented here because it takes forever to compute it, and
        % the downconverter is called thousand times depending on the data
        n = 3; Wn = 0.008;
        [butter_b,butter_a] = butter(n,Wn);

        tE = read_custom_acqu_par(path,'echoTimeRun');
        NoE = read_custom_acqu_par(path,'nrEchoes');
        SpE = read_custom_acqu_par(path,'nrPnts');
        Df = read_custom_acqu_par(path,'b1Freq')*1e6;
        Sf = read_custom_acqu_par(path,'adcFreq')*1e6;
        start_param = read_custom_acqu_par(path,'minTau')*1e3;
        stop_param = read_custom_acqu_par(path,'maxTau')*1e3;
        nsteps = read_custom_acqu_par(path,'tauSteps');
        logspaceyesno = read_custom_acqu_par(path,'logSpace');
        total_scan = read_custom_acqu_par(path,'nrIterations');

        if (logspaceyesno)
            sweep_param = logspace(log10(start_param),log10(stop_param),nsteps);
        else
            sweep_param = linspace(start_param,stop_param,nsteps);
        end
        
        % compute reference
        filename = '\datref';
        [aref,aref_init,~,~,~,thetaref,~,echoref_avg] = compute_multiple(path,filename,Df,Sf,tE,total_scan*2,en_fig, butter_a, butter_b, 0, 0, 0);
        
        % compute data
        a = zeros(length(sweep_param),NoE);
        a_init = zeros(1,length(sweep_param));
        theta = zeros(1,length(sweep_param));
        for m = 1:length(sweep_param)
            disp(['current t1 180-pulse: ',num2str(sweep_param(m)),'us']);
            filename = ['\dat_',num2str(sweep_param(m),'%03.3f')];
            [a(m,:),a_init(m),~,~,~,theta(m),~,~] = compute_multiple(path,filename,Df,Sf,tE,total_scan,en_fig, butter_a, butter_b, 1,thetaref,echoref_avg );            
            
            % subtract the signal with the reference
            a(m,:) = aref - a(m,:);
            a_init(m) = aref_init - a_init(m);
        end
            
        save([path,'\processed_data'],'a','a_init','theta','sweep_param'); % save processed data
        
    end
    
    %% PROGRAM RELATED TO KEA
    path_curr = [path,'\kea_format'];
    if ~exist(path_curr,'dir') || reprocess_conversion
        convert_to_prospa_data_t1(a,path,1);
        T1T2Data_basicplot(path_curr); % plot basic data
    end
    
    if (process_2D_inversion)
        addpath(genpath('prospa_code'));
        KeaT1T2analysis_new2(path_curr,1);
    end
    
    %% PLOTS
    figure(172);
    plot(sweep_param,sum(real(a')));
    title('Echo average with 180-pulse length'); set(gca,'FontSize',12);
    xlabel('180-pulse length (us)');
    ylabel('Amplitude');

    figure(173);
    plot(sweep_param,a_init);
    title('Initial amplitude with 180-pulse length'); set(gca,'FontSize',12);
    xlabel('180-pulse length (us)');
    ylabel('Amplitude');
    
    figure(174);
    plot(sweep_param,theta/(2*pi)*360,'x');
    title('Rotation'); set(gca,'FontSize',12);
    xlabel('180-pulse length (uS)');
    ylabel('rotation angle (deg)');
end