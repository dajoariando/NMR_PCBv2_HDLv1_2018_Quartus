function SNRmax_freq = compute_freqsw(path,enable_figure)
% path          : directory path to the samples
% enable_figure : enable the figure generated by compute_single
    
    %% SETTINGS
    recompute = 0;
    plottype = 0;
    % profile on;
    
    NoE             = read_custom_acqu_par(path,'nrEchoes');
    tE              = read_custom_acqu_par(path,'echoTimeRun');
    start_param     = read_custom_acqu_par(path,'b1Freq_sta');
    stop_param      = read_custom_acqu_par(path,'b1Freq_sto');
    spacing_param   = read_custom_acqu_par(path,'b1Freq_spa');
    total_scan      = read_custom_acqu_par(path,'nrIteration');
    
    % this is a standard butterworth filter used by downconverter (downconvert.m)
    % it is implemented here because it takes forever to compute it, and
    % the downconverter is called thousand times depending on the data
    % n = 3; Wn = 0.008;
    n = 1; Wn = 0.03;
    [butter_b,butter_a] = butter(n,Wn);

    %% MAIN PROGRAM
    if exist ([path,'\processed_data.mat'],'file') && ~recompute % check if this computation has been done before
       load([path,'\processed_data.mat']);
    else
        
        sweep_param = start_param : spacing_param : stop_param;
        a       = zeros(length(sweep_param),NoE);
        a_init  = zeros(1,length(sweep_param));
        snr   = zeros(1,length(sweep_param));
        for m = 1:length(sweep_param)
            disp(['current freq: ',num2str(sweep_param(m)/1e6),' MHz']);
            filename = ['\dat_',num2str(sweep_param(m),'%06.3f')];
            [a(m,:),a_init(m),snr(m)] = compute_multiple(path,filename,sweep_param(m)*1e6,sweep_param(m)*1e6*4,tE(m),total_scan,enable_figure, butter_a, butter_b,0,0,0);
        end
        
    end
    
    %% PLOT OPTIONS
    if plottype == 0
        figure(172);
        plot(sweep_param,sum(real(a')),'linewidth',2);
        set(gca,'FontSize',12);
        % title('Vector signal amplitude');
        xlabel('Frequency (MHz)');
        ylabel('Amplitude');  

        figure(173);
        plot(sweep_param,a_init/max(a_init),'x','linewidth',2);
        set(gca,'FontSize',12);
        % title('Normalized signal amplitude');
        xlabel('Frequency (MHz)');
        ylabel('Normalized amplitude');
        %grid on; grid minor;
        set(gca,'Fontsize',16)

        figure(174);
        plot(sweep_param,snr/max(snr),'linewidth',2);
        set(gca,'FontSize',12);
        % title('Signal-to-noise ratio (SNR)');
        xlabel('Frequency (MHz)');
        ylabel('SNR (a.u.)');
        
    else
        
        % curve fit
        fittype = 'poly5';
        [v_curve,~,v_output]=fit(sweep_param',sum(real(a'))',fittype);
        [a_curve,~,a_output]=fit(sweep_param',a_init',fittype);
        [s_curve,~,s_output]=fit(sweep_param',snr',fittype);

        figure(172);
        subplot(2,1,1);
        plot(v_curve,sweep_param,sum(real(a')));
        title('Vector signal amplitude');
        xlabel('Frequency (MHz)');
        ylabel('Amplitude');
        subplot(2,1,2);
        hist(v_output.residuals);
        title('Residual');
        xlabel('\Delta A');
        ylabel('Amplitude');  

        figure(173);
        subplot(2,1,1);
        plot(a_curve,sweep_param,a_init);
        title('Initial signal amplitude');
        xlabel('Frequency (MHz)');
        ylabel('Amplitude');
        subplot(2,1,2);
        hist(a_output.residuals);
        title('Residual');
        xlabel('\Delta A');
        ylabel('Amplitude');

        figure(174);
        subplot(2,1,1);
        plot(s_curve,sweep_param,snr);
        title('Abs signal amplitude (scan averaged and echo summed)');
        xlabel('Frequency (MHz)');
        ylabel('Amplitude');
        subplot(2,1,2);
        hist(s_output.residuals);
        title('Residual');
        xlabel('\Delta A');
        ylabel('Amplitude');
        
    end
    
    clear recompute plottype;
    save([path,'\processed_data']);
    % profile viewer;
    
    SNRmax_freq = sweep_param(snr==max(snr));
    
end